name: Release Build

on:
  release:
    types: [created]
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build-macos:
    name: Build on macOS
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install cmake pkg-config nasm yasm x264 x265 opencv
          echo "OPENCV_ROOT_PATH=$(brew --prefix opencv)" >> $GITHUB_ENV

      - name: Download 3rd_party
        run: |
          curl -L -o 3rd_party.tar.gz https://github.com/Areay7/LearnCode/releases/download/v1.1.1/3rd_party.tar.gz
          tar -xzf 3rd_party.tar.gz

      - name: Build FFmpeg
        run: |
          if [ ! -d "ffmpeg" ]; then
            wget https://ffmpeg.org/releases/ffmpeg-4.4.5.tar.bz2
            tar xjvf ffmpeg-4.4.5.tar.bz2
            cd ffmpeg-4.4.5
            ./configure --pkg-config-flags=--static --enable-shared --disable-static --extra-libs=-lpthread --extra-libs=-lm --enable-gpl --enable-nonfree --enable-libx264 --enable-libx265 --enable-postproc --prefix=$(pwd)/../ffmpeg
            make -j$(sysctl -n hw.ncpu)
            make install
            cd ..
          fi
          echo "FFMPEG_ROOT_PATH=$(pwd)/ffmpeg" >> $GITHUB_ENV

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.5.3'
          target: 'desktop'
          arch: 'clang_64'
          modules: 'qt5compat qtmultimedia'

      - name: Build Project
        run: |
          mkdir build && cd build
          cmake ../ToolKit \
            -DCMAKE_PREFIX_PATH="$Qt6_DIR" \
            -DFFMPEG_ROOT="$FFMPEG_ROOT_PATH" \
            -DOPENCV_ROOT="$OPENCV_ROOT_PATH" \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5
          make -j$(sysctl -n hw.ncpu)

      - name: Deploy Qt App with macdeployqt
        run: |
          APP_PATH=build/ToolKit.app
          MACOS_PATH=$APP_PATH/Contents/MacOS

          SEETA_PATH=3rd_party/Opencv/lib/MacOS/arm64
          HARU_PATH=3rd_party/libhpdf/MacOS/arm64
          MQTT_PATH=3rd_party/QtMqtt/6.5.3/MacOS/arm64

          if [ ! -f "$MACOS_PATH/ToolKit" ]; then
            echo "Error: $MACOS_PATH/ToolKit not found"
            ls -l $MACOS_PATH || true
            exit 1
          fi

          install_name_tool -add_rpath "$MQTT_PATH" $MACOS_PATH/ToolKit

          export DYLD_LIBRARY_PATH="$FFMPEG_ROOT_PATH/lib:$OPENCV_ROOT_PATH/lib:$SEETA_PATH:$HARU_PATH:$MQTT_PATH:$DYLD_LIBRARY_PATH"
          echo "DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH"

          cd build
          macdeployqt ToolKit.app -dmg -verbose=3 || true

          echo "== Checking ToolKit.dmg existence =="
          ls -lh ToolKit.dmg || { echo "ToolKit.dmg not created!"; exit 1; }

          cp ToolKit.dmg ../ToolKit_macOS.dmg

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ToolKit_macOS
          path: ToolKit_macOS.dmg

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ToolKit_macOS.dmg

  build-linux:
    name: Build on Ubuntu
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake pkg-config git curl tar \
            libx11-dev libgl1-mesa-dev libpulse-dev \
            yasm nasm libx264-dev libx265-dev libnuma-dev \
            libgtk-3-dev libjpeg-dev libpng-dev libtiff-dev \
            libavcodec-dev libavformat-dev libswscale-dev libv4l-dev \
            libeigen3-dev libtbb-dev \
            libfuse2 patchelf

      - name: Download and Build FFmpeg 4.4.5
        run: |
          wget https://ffmpeg.org/releases/ffmpeg-4.4.5.tar.bz2
          tar xjvf ffmpeg-4.4.5.tar.bz2
          mkdir ffmpeg && cd ffmpeg-4.4.5
          ./configure \
            --enable-shared \
            --disable-static \
            --enable-gpl \
            --enable-nonfree \
            --enable-libx264 \
            --enable-libx265 \
            --enable-postproc \
            --prefix=$(pwd)/../ffmpeg
          make -j$(nproc)
          make install
          cd ..
          echo "FFMPEG_ROOT_PATH=$(pwd)/ffmpeg" >> $GITHUB_ENV

      - name: Download and Build OpenCV 4.4.0
        run: |
          git clone --branch 4.4.0 https://github.com/opencv/opencv.git
          git clone --branch 4.4.0 https://github.com/opencv/opencv_contrib.git
          mkdir -p opencv/build && cd opencv/build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=$(pwd)/../../opencv-install \
            -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
            -DBUILD_opencv_world=ON \
            -DBUILD_EXAMPLES=OFF \
            -DBUILD_TESTS=OFF \
            -DBUILD_PERF_TESTS=OFF \
            -DWITH_GTK=OFF
          make -j$(nproc)
          make install
          cd ../..
          echo "OPENCV_ROOT_PATH=$(pwd)/opencv-install" >> $GITHUB_ENV

      - name: Install Qt 6.5.3 with modules
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.5.3'
          target: 'desktop'
          arch: 'gcc_64'
          modules: 'qt5compat qtmultimedia'

      - name: Clone and Build QtMqtt 6.5.3
        run: |
          git clone --branch v6.5.3 https://github.com/qt/qtmqtt.git
          mkdir -p qtmqtt/build && cd qtmqtt/build
          cmake .. \
            -DCMAKE_PREFIX_PATH="$Qt6_DIR" \
            -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/qtmqtt-install \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=ON
          make -j$(nproc)
          make install
          ln -sf libQt6Mqtt.so ${{ github.workspace }}/qtmqtt-install/lib/libQtMqtt.so
          cd ../..
          echo "MQTT_ROOT=${{ github.workspace }}/qtmqtt-install" >> $GITHUB_ENV

      - name: Configure ToolKit
        run: |
          mkdir build && cd build
          cmake ../ToolKit \
            -DCMAKE_PREFIX_PATH="$Qt6_DIR" \
            -DFFMPEG_ROOT="$FFMPEG_ROOT_PATH" \
            -DOPENCV_ROOT="$OPENCV_ROOT_PATH" \
            -DMQTT_ROOT="$MQTT_ROOT"

      - name: Build ToolKit
        run: |
          cd build
          make -j$(nproc)

      - name: Download linuxdeployqt
        run: |
          wget -c https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
          chmod +x linuxdeployqt-continuous-x86_64.AppImage
          sudo mv linuxdeployqt-continuous-x86_64.AppImage /usr/local/bin/linuxdeployqt

      - name: Prepare AppDir and Create AppImage
        run: |
          mkdir -p AppDir/usr/bin
          cp build/ToolKit AppDir/usr/bin/

          mkdir -p AppDir/usr/share/applications
          cat > AppDir/usr/share/applications/ToolKit.desktop <<EOF
          [Desktop Entry]
          Name=ToolKit
          Exec=ToolKit
          Icon=ToolKit
          Type=Application
          Categories=Utility;
          EOF

          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          cp ToolKit/icon.png AppDir/usr/share/icons/hicolor/256x256/apps/ToolKit.png || true

          export VERSION=${{ github.ref_name }}
          linuxdeployqt AppDir/usr/share/applications/ToolKit.desktop -appimage -verbose=2

      - name: Upload Release AppImage
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ToolKit*.AppImage

  build-windows:
    name: Build on Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download 3rd_party
        run: |
          curl -L -o 3rd_party.tar.gz https://github.com/Areay7/LearnCode/releases/download/v1.1.1/3rd_party.tar.gz
          tar -xzf 3rd_party.tar.gz

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.5.3'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          modules: 'qt5compat qtmultimedia'

      - name: Enable MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build
        run: |
          mkdir build
          cd build
          cmake ../ToolKit -DCMAKE_PREFIX_PATH="%Qt6_DIR%" -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release

      - name: Deploy and Package
        shell: powershell
        run: |
          $OutDir = "ToolKit_win64"
          mkdir $OutDir
          Copy-Item -Path "build\Release\ToolKit.exe" -Destination "$OutDir"

          & "${env:Qt6_DIR}\bin\windeployqt.exe" --qmldir=".." "$OutDir\ToolKit.exe"

          # Copy FFmpeg DLLs
          Copy-Item -Path "3rd_party\FFmpeg\lib\win\win64\*.dll" -Destination $OutDir -ErrorAction SilentlyContinue

          # Copy OpenCV DLLs
          Copy-Item -Path "3rd_party\Opencv\lib\win\win64\release\*.dll" -Destination $OutDir -ErrorAction SilentlyContinue

          # Copy QtMqtt DLL
          Copy-Item -Path "3rd_party\QtMqtt\5.15.2\win\win64\*.dll" -Destination $OutDir -ErrorAction SilentlyContinue

          # Copy HaruPDF (optional)
          Copy-Item -Path "3rd_party\libhpdf\win\win64\*.dll" -Destination $OutDir -ErrorAction SilentlyContinue

          # Download and extract qt5neworkt.zip into output directory
          Invoke-WebRequest -Uri "https://github.com/Areay7/LearnCode/releases/download/v1.1.1/qt5neworkt.zip" -OutFile "qt5network.zip"
          Expand-Archive -Path "qt5network.zip" -DestinationPath "$OutDir" -Force

          # Copy OpenCV model folder
          Copy-Item -Path "3rd_party\Opencv\model" -Destination $OutDir -Recurse -Force

          Compress-Archive -Path "$OutDir" -DestinationPath "ToolKit_win64.zip"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ToolKit_win64
          path: ToolKit_win64.zip

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ToolKit_win64.zip